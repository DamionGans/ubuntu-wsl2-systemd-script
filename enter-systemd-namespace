#!/bin/bash --norc
if [ "$LOGNAME" != "root" ]; then
    echo "You need to run $0 through sudo"
    exit 1
fi

if [ -x /usr/sbin/daemonize ]; then
    DAEMONIZE=/usr/sbin/daemonize
elif [ -x /usr/bin/daemonize ]; then
    DAEMONIZE=/usr/bin/daemonize
else
    echo "Cannot execute daemonize to start systemd."
    exit 1
fi

if ! command -v /lib/systemd/systemd > /dev/null; then
    echo "Cannot execute /lib/systemd/systemd."
    exit 1
fi

if ! command -v /usr/bin/unshare > /dev/null; then
    echo "Cannot execute /usr/bin/unshare."
    exit 1
fi


SYSTEMD_EXE="/lib/systemd/systemd --unit=multi-user.target"
SYSTEMD_PID="$(ps -eo pid=,args= | awk '$2" "$3=="'"$SYSTEMD_EXE"'" {print $1}')"
if [ -z "$SYSTEMD_PID" ]; then
    "$DAEMONIZE" /usr/bin/unshare --fork --pid --mount-proc bash -c 'export container=wsl; mount -t binfmt_misc binfmt_misc /proc/sys/fs/binfmt_misc; exec '"$SYSTEMD_EXE"
    while [ -z "$SYSTEMD_PID" ]; do
        #echo "Sleeping for 1 second to let systemd settle"
        sleep 1
        SYSTEMD_PID="$(ps -eo pid=,args= | awk '$2" "$3=="'"$SYSTEMD_EXE"'" {print $1}')"
    done
    if [ "${USE_WSLG_SOCKET}" != "false" ]; then
      if [ ! -L "/tmp/.X11-unix" ]; then
        rm -rf "/tmp/.X11-unix"
        ln -s /mnt/wslg/.X11-unix /tmp/.X11-unix
      fi
    fi
fi

USER_USERNAME=${SUDO_USER:-$LOGNAME}
USER_HOME="$(getent passwd | awk -F: '$1=="'"$USER_USERNAME"'" {print $6}')"
if [ -n "$SYSTEMD_PID" ] && [ "$SYSTEMD_PID" != "1" ]; then
    if [ -n "$1" ] && [ "$1" != "bash --login" ] && [ "$1" != "/bin/bash --login" ]; then
        exec /usr/bin/nsenter -t "$SYSTEMD_PID" -a \
            /usr/bin/sudo -H -u "$USER_USERNAME" \
            /bin/bash --norc -c "set -a; [ -f \"\$HOME/.systemd-env\" ] && source \"\$HOME/.systemd-env\"; set +a; $@"
    else
        exec /usr/bin/nsenter -t "$SYSTEMD_PID" -a \
            /bin/login -p -f "$USER_USERNAME"
    fi
    echo "Existential crisis"
    exit 1
fi
